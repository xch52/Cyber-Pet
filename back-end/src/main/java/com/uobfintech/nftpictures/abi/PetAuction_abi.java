package com.uobfintech.nftpictures.abi;

import io.reactivex.Flowable;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.3.
 */
@SuppressWarnings("rawtypes")
public class PetAuction_abi extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b506040516134f53803806134f5833981810160405281019061003191906100dc565b60015f819055508060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610107565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100ab82610082565b9050919050565b6100bb816100a1565b81146100c5575f80fd5b50565b5f815190506100d6816100b2565b92915050565b5f602082840312156100f1576100f061007e565b5b5f6100fe848285016100c8565b91505092915050565b6133e1806101145f395ff3fe6080604052600436106100dc575f3560e01c806396b5a7551161007e578063e21463e411610058578063e21463e414610273578063e6512c661461029f578063ede4dd45146102db578063f8c02f31146102f1576100dc565b806396b5a755146101fb578063b9a2de3a14610223578063cda4beef1461024b576100dc565b8063454a2ab3116100ba578063454a2ab314610148578063571a26a0146101645780636dd98867146101a7578063778cdf3d146101d1576100dc565b806303bb502f146100e05780630d856664146100f65780631f1c1e4b1461011e575b5f80fd5b3480156100eb575f80fd5b506100f461032e565b005b348015610101575f80fd5b5061011c60048036038101906101179190611f36565b610413565b005b348015610129575f80fd5b5061013261055e565b60405161013f9190612137565b60405180910390f35b610162600480360381019061015d9190612157565b610730565b005b34801561016f575f80fd5b5061018a60048036038101906101859190612157565b610a38565b60405161019e9897969594939291906121af565b60405180910390f35b3480156101b2575f80fd5b506101bb610ac6565b6040516101c89190612286565b60405180910390f35b3480156101dc575f80fd5b506101e5610aeb565b6040516101f29190612347565b60405180910390f35b348015610206575f80fd5b50610221600480360381019061021c9190612157565b610afc565b005b34801561022e575f80fd5b5061024960048036038101906102449190612157565b610cf4565b005b348015610256575f80fd5b50610271600480360381019061026c9190611f36565b61101d565b005b34801561027e575f80fd5b506102876114b9565b60405161029693929190612534565b60405180910390f35b3480156102aa575f80fd5b506102c560048036038101906102c091906125a8565b6117c3565b6040516102d291906125d3565b60405180910390f35b3480156102e6575f80fd5b506102ef6117d8565b005b3480156102fc575f80fd5b5061031760048036038101906103129190612157565b611949565b60405161032592919061272e565b60405180910390f35b5f6103396001611b73565b90505f5b8181101561040f575f61035a826001611b8690919063ffffffff16565b90505f60045f8381526020019081526020015f2090508060030154421180156103905750806007015f9054906101000a900460ff165b156104005761039e82610cf4565b817ff612377c467cd25acd319d3366f346d6d2896436e8422d79758aef71ddbb7f34826005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401546040516103f792919061275e565b60405180910390a25b5050808060010191505061033d565b5050565b5f60045f8581526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae90612805565b60405180910390fd5b5f8160040154146104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490612893565b60405180910390fd5b828160060181905550814261051291906128de565b8160030181905550837f364b79005dd15e524680d4a8482888120dcc595f290e7bcd79f1ef78b4ef6316848360030154604051610550929190612911565b60405180910390a250505050565b60605f61056b6001611b73565b67ffffffffffffffff81111561058457610583612938565b5b6040519080825280602002602001820160405280156105bd57816020015b6105aa611e52565b8152602001906001900390816105a25790505b5090505f5b6105cc6001611b73565b811015610728575f6105e8826001611b8690919063ffffffff16565b905060045f8281526020019081526020015f20604051806101000160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015f9054906101000a900460ff16151515158152505083838151811061070f5761070e612965565b5b60200260200101819052505080806001019150506105c2565b508091505090565b610738611b9d565b5f60045f8381526020019081526020015f209050806007015f9054906101000a900460ff1661079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906129dc565b60405180910390fd5b806002015442101580156107b4575080600301544211155b6107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90612a44565b60405180910390fd5b806006015434101561083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190612ad2565b60405180910390fd5b80600401543411610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087790612b60565b60405180910390fd5b5f816005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8260040154905034836004018190555033836005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146109f0575f8273ffffffffffffffffffffffffffffffffffffffff168260405161095290612bab565b5f6040518083038185875af1925050503d805f811461098c576040519150601f19603f3d011682016040523d82523d5f602084013e610991565b606091505b50509050806109ee578160055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109e691906128de565b925050819055505b505b837f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c473334604051610a2292919061275e565b60405180910390a2505050610a35611bea565b50565b6004602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015490806005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806006015490806007015f9054906101000a900460ff16905088565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060610af76001611bf3565b905090565b5f60045f8381526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790612c2f565b60405180910390fd5b5f816004015414610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90612cbd565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401610c6693929190612cdb565b5f604051808303815f87803b158015610c7d575f80fd5b505af1158015610c8f573d5f803e3d5ffd5b505050505f816007015f6101000a81548160ff021916908315150217905550610cc2826001611c1290919063ffffffff16565b50817f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df60405160405180910390a25050565b610cfc611b9d565b5f60045f8381526020019081526020015f209050806007015f9054906101000a900460ff16610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d57906129dc565b60405180910390fd5b80600301544211610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90612d5a565b60405180910390fd5b5f816007015f6101000a81548160ff0219169083151502179055508060060154816004015410610eed5760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30836005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401610e5193929190612cdb565b5f604051808303815f87803b158015610e68575f80fd5b505af1158015610e7a573d5f803e3d5ffd5b50505050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc826004015490811502906040515f60405180830381858888f19350505050158015610ee7573d5f803e3d5ffd5b50610f9b565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30835f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401610f6d93929190612cdb565b5f604051808303815f87803b158015610f84575f80fd5b505af1158015610f96573d5f803e3d5ffd5b505050505b610faf826001611c1290919063ffffffff16565b50817fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea501826005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836004015460405161100992919061275e565b60405180910390a25061101a611bea565b50565b3373ffffffffffffffffffffffffffffffffffffffff1660035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161108e91906125d3565b602060405180830381865afa1580156110a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110cd9190612d8c565b73ffffffffffffffffffffffffffffffffffffffff1614611123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111a90612e27565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1660035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc856040518263ffffffff1660e01b815260040161119491906125d3565b602060405180830381865afa1580156111af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d39190612d8c565b73ffffffffffffffffffffffffffffffffffffffff1614611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122090612eb5565b60405180910390fd5b5f821161126b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126290612f43565b60405180910390fd5b5f4290505f828261127c91906128de565b90506040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018381526020018281526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016001151581525060045f8781526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e0820151816007015f6101000a81548160ff0219169083151502179055509050506113ea856001611c2990919063ffffffff16565b5060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161144993929190612cdb565b5f604051808303815f87803b158015611460575f80fd5b505af1158015611472573d5f803e3d5ffd5b50505050847fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78584846040516114aa93929190612f61565b60405180910390a25050505050565b60608060605f6114c96001611bf3565b90505f815167ffffffffffffffff8111156114e7576114e6612938565b5b60405190808252806020026020018201604052801561152057816020015b61150d611e52565b8152602001906001900390816115055790505b5090505f825167ffffffffffffffff81111561153f5761153e612938565b5b60405190808252806020026020018201604052801561157857816020015b611565611ebd565b81526020019060019003908161155d5790505b5090505f5b83518110156117b15760045f85838151811061159c5761159b612965565b5b602002602001015181526020019081526020015f20604051806101000160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015f9054906101000a900460ff1615151515815250508382815181106116c5576116c4612965565b5b602002602001018190525060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b6db7b58583815181106117205761171f612965565b5b60200260200101516040518263ffffffff1660e01b815260040161174491906125d3565b5f60405180830381865afa15801561175e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061178691906131cc565b82828151811061179957611798612965565b5b6020026020010181905250808060010191505061157d565b50828282955095509550505050909192565b6005602052805f5260405f205f915090505481565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f811161185b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118529061325d565b60405180910390fd5b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f3373ffffffffffffffffffffffffffffffffffffffff16826040516118c290612bab565b5f6040518083038185875af1925050503d805f81146118fc576040519150601f19603f3d011682016040523d82523d5f602084013e611901565b606091505b5050905080611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193c906132c5565b60405180910390fd5b5050565b611951611e52565b611959611ebd565b60045f8481526020019081526020015f206007015f9054906101000a900460ff166119b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b0906129dc565b60405180910390fd5b60045f8481526020019081526020015f2060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b6db7b5856040518263ffffffff1660e01b8152600401611a2491906125d3565b5f60405180830381865afa158015611a3e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611a6691906131cc565b81604051806101000160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015f9054906101000a900460ff161515151581525050915091509150915091565b5f611b7f825f01611c40565b9050919050565b5f611b93835f0183611c4f565b5f1c905092915050565b60025f5403611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd89061332d565b60405180910390fd5b60025f81905550565b60015f81905550565b60605f611c01835f01611c76565b905060608190508092505050919050565b5f611c21835f01835f1b611ccf565b905092915050565b5f611c38835f01835f1b611dcb565b905092915050565b5f815f01805490509050919050565b5f825f018281548110611c6557611c64612965565b5b905f5260205f200154905092915050565b6060815f01805480602002602001604051908101604052809291908181526020018280548015611cc357602002820191905f5260205f20905b815481526020019060010190808311611caf575b50505050509050919050565b5f80836001015f8481526020019081526020015f205490505f8114611dc0575f600182611cfc919061334b565b90505f6001865f0180549050611d12919061334b565b9050808214611d78575f865f018281548110611d3157611d30612965565b5b905f5260205f200154905080875f018481548110611d5257611d51612965565b5b905f5260205f20018190555083876001015f8381526020019081526020015f2081905550505b855f01805480611d8b57611d8a61337e565b5b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050611dc5565b5f9150505b92915050565b5f611dd68383611e32565b611e2857825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f208190555060019050611e2c565b5f90505b92915050565b5f80836001015f8481526020019081526020015f20541415905092915050565b6040518061010001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f151581525090565b6040518060c001604052805f815260200160608152602001606081526020016060815260200160608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b611f1581611f03565b8114611f1f575f80fd5b50565b5f81359050611f3081611f0c565b92915050565b5f805f60608486031215611f4d57611f4c611efb565b5b5f611f5a86828701611f22565b9350506020611f6b86828701611f22565b9250506040611f7c86828701611f22565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611fd882611faf565b9050919050565b611fe881611fce565b82525050565b611ff781611f03565b82525050565b5f8115159050919050565b61201181611ffd565b82525050565b61010082015f82015161202c5f850182611fdf565b50602082015161203f6020850182611fee565b5060408201516120526040850182611fee565b5060608201516120656060850182611fee565b5060808201516120786080850182611fee565b5060a082015161208b60a0850182611fdf565b5060c082015161209e60c0850182611fee565b5060e08201516120b160e0850182612008565b50505050565b5f6120c28383612017565b6101008301905092915050565b5f602082019050919050565b5f6120e582611f86565b6120ef8185611f90565b93506120fa83611fa0565b805f5b8381101561212a57815161211188826120b7565b975061211c836120cf565b9250506001810190506120fd565b5085935050505092915050565b5f6020820190508181035f83015261214f81846120db565b905092915050565b5f6020828403121561216c5761216b611efb565b5b5f61217984828501611f22565b91505092915050565b61218b81611fce565b82525050565b61219a81611f03565b82525050565b6121a981611ffd565b82525050565b5f610100820190506121c35f83018b612182565b6121d0602083018a612191565b6121dd6040830189612191565b6121ea6060830188612191565b6121f76080830187612191565b61220460a0830186612182565b61221160c0830185612191565b61221e60e08301846121a0565b9998505050505050505050565b5f819050919050565b5f61224e61224961224484611faf565b61222b565b611faf565b9050919050565b5f61225f82612234565b9050919050565b5f61227082612255565b9050919050565b61228081612266565b82525050565b5f6020820190506122995f830184612277565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6122d38383611fee565b60208301905092915050565b5f602082019050919050565b5f6122f58261229f565b6122ff81856122a9565b935061230a836122b9565b805f5b8381101561233a57815161232188826122c8565b975061232c836122df565b92505060018101905061230d565b5085935050505092915050565b5f6020820190508181035f83015261235f81846122eb565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6123d282612390565b6123dc818561239a565b93506123ec8185602086016123aa565b6123f5816123b8565b840191505092915050565b5f60c083015f8301516124155f860182611fee565b506020830151848203602086015261242d82826123c8565b9150506040830151848203604086015261244782826123c8565b9150506060830151848203606086015261246182826123c8565b9150506080830151848203608086015261247b82826123c8565b91505060a083015184820360a086015261249582826123c8565b9150508091505092915050565b5f6124ad8383612400565b905092915050565b5f602082019050919050565b5f6124cb82612367565b6124d58185612371565b9350836020820285016124e785612381565b805f5b85811015612522578484038952815161250385826124a2565b945061250e836124b5565b925060208a019950506001810190506124ea565b50829750879550505050505092915050565b5f6060820190508181035f83015261254c81866122eb565b9050818103602083015261256081856120db565b9050818103604083015261257481846124c1565b9050949350505050565b61258781611fce565b8114612591575f80fd5b50565b5f813590506125a28161257e565b92915050565b5f602082840312156125bd576125bc611efb565b5b5f6125ca84828501612594565b91505092915050565b5f6020820190506125e65f830184612191565b92915050565b61010082015f8201516126015f850182611fdf565b5060208201516126146020850182611fee565b5060408201516126276040850182611fee565b50606082015161263a6060850182611fee565b50608082015161264d6080850182611fee565b5060a082015161266060a0850182611fdf565b5060c082015161267360c0850182611fee565b5060e082015161268660e0850182612008565b50505050565b5f60c083015f8301516126a15f860182611fee565b50602083015184820360208601526126b982826123c8565b915050604083015184820360408601526126d382826123c8565b915050606083015184820360608601526126ed82826123c8565b9150506080830151848203608086015261270782826123c8565b91505060a083015184820360a086015261272182826123c8565b9150508091505092915050565b5f610120820190506127425f8301856125ec565b818103610100830152612755818461268c565b90509392505050565b5f6040820190506127715f830185612182565b61277e6020830184612191565b9392505050565b5f82825260208201905092915050565b7f4f6e6c79207468652073656c6c65722063616e207570646174652074686520615f8201527f756374696f6e0000000000000000000000000000000000000000000000000000602082015250565b5f6127ef602683612785565b91506127fa82612795565b604082019050919050565b5f6020820190508181035f83015261281c816127e3565b9050919050565b7f43616e6e6f742075706461746520616674657220626964732061726520706c615f8201527f6365640000000000000000000000000000000000000000000000000000000000602082015250565b5f61287d602383612785565b915061288882612823565b604082019050919050565b5f6020820190508181035f8301526128aa81612871565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6128e882611f03565b91506128f383611f03565b925082820190508082111561290b5761290a6128b1565b5b92915050565b5f6040820190506129245f830185612191565b6129316020830184612191565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f41756374696f6e206973206e6f742061637469766500000000000000000000005f82015250565b5f6129c6601583612785565b91506129d182612992565b602082019050919050565b5f6020820190508181035f8301526129f3816129ba565b9050919050565b7f41756374696f6e206973206e6f7420696e2061637469766520706572696f64005f82015250565b5f612a2e601f83612785565b9150612a39826129fa565b602082019050919050565b5f6020820190508181035f830152612a5b81612a22565b9050919050565b7f426964206d757374206265206174206c656173742074686520726573657276655f8201527f2070726963650000000000000000000000000000000000000000000000000000602082015250565b5f612abc602683612785565b9150612ac782612a62565b604082019050919050565b5f6020820190508181035f830152612ae981612ab0565b9050919050565b7f546865726520697320616c7265616479206120686967686572206f72206571755f8201527f616c206269640000000000000000000000000000000000000000000000000000602082015250565b5f612b4a602683612785565b9150612b5582612af0565b604082019050919050565b5f6020820190508181035f830152612b7781612b3e565b9050919050565b5f81905092915050565b50565b5f612b965f83612b7e565b9150612ba182612b88565b5f82019050919050565b5f612bb582612b8b565b9150819050919050565b7f4f6e6c79207468652073656c6c65722063616e2063616e63656c2074686520615f8201527f756374696f6e0000000000000000000000000000000000000000000000000000602082015250565b5f612c19602683612785565b9150612c2482612bbf565b604082019050919050565b5f6020820190508181035f830152612c4681612c0d565b9050919050565b7f43616e6e6f742063616e63656c20616674657220626964732061726520706c615f8201527f6365640000000000000000000000000000000000000000000000000000000000602082015250565b5f612ca7602383612785565b9150612cb282612c4d565b604082019050919050565b5f6020820190508181035f830152612cd481612c9b565b9050919050565b5f606082019050612cee5f830186612182565b612cfb6020830185612182565b612d086040830184612191565b949350505050565b7f41756374696f6e20686173206e6f7420656e64656420796574000000000000005f82015250565b5f612d44601983612785565b9150612d4f82612d10565b602082019050919050565b5f6020820190508181035f830152612d7181612d38565b9050919050565b5f81519050612d868161257e565b92915050565b5f60208284031215612da157612da0611efb565b5b5f612dae84828501612d78565b91505092915050565b7f4f6e6c7920746865206f776e65722063616e2063726561746520616e206175635f8201527f74696f6e00000000000000000000000000000000000000000000000000000000602082015250565b5f612e11602483612785565b9150612e1c82612db7565b604082019050919050565b5f6020820190508181035f830152612e3e81612e05565b9050919050565b7f436f6e7472616374206e6565647320746f20626520617070726f76656420746f5f8201527f207472616e73666572204e465400000000000000000000000000000000000000602082015250565b5f612e9f602d83612785565b9150612eaa82612e45565b604082019050919050565b5f6020820190508181035f830152612ecc81612e93565b9050919050565b7f52657365727665207072696365206d757374206265206d6f7265207468616e205f8201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b5f612f2d602183612785565b9150612f3882612ed3565b604082019050919050565b5f6020820190508181035f830152612f5a81612f21565b9050919050565b5f606082019050612f745f830186612191565b612f816020830185612191565b612f8e6040830184612191565b949350505050565b5f80fd5b612fa3826123b8565b810181811067ffffffffffffffff82111715612fc257612fc1612938565b5b80604052505050565b5f612fd4611ef2565b9050612fe08282612f9a565b919050565b5f80fd5b5f81519050612ff781611f0c565b92915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561301f5761301e612938565b5b613028826123b8565b9050602081019050919050565b5f61304761304284613005565b612fcb565b90508281526020810184848401111561306357613062613001565b5b61306e8482856123aa565b509392505050565b5f82601f83011261308a57613089612ffd565b5b815161309a848260208601613035565b91505092915050565b5f60c082840312156130b8576130b7612f96565b5b6130c260c0612fcb565b90505f6130d184828501612fe9565b5f83015250602082015167ffffffffffffffff8111156130f4576130f3612fe5565b5b61310084828501613076565b602083015250604082015167ffffffffffffffff81111561312457613123612fe5565b5b61313084828501613076565b604083015250606082015167ffffffffffffffff81111561315457613153612fe5565b5b61316084828501613076565b606083015250608082015167ffffffffffffffff81111561318457613183612fe5565b5b61319084828501613076565b60808301525060a082015167ffffffffffffffff8111156131b4576131b3612fe5565b5b6131c084828501613076565b60a08301525092915050565b5f602082840312156131e1576131e0611efb565b5b5f82015167ffffffffffffffff8111156131fe576131fd611eff565b5b61320a848285016130a3565b91505092915050565b7f4e6f2066756e647320746f2077697468647261770000000000000000000000005f82015250565b5f613247601483612785565b915061325282613213565b602082019050919050565b5f6020820190508181035f8301526132748161323b565b9050919050565b7f5769746864726177616c206661696c65640000000000000000000000000000005f82015250565b5f6132af601183612785565b91506132ba8261327b565b602082019050919050565b5f6020820190508181035f8301526132dc816132a3565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f613317601f83612785565b9150613322826132e3565b602082019050919050565b5f6020820190508181035f8301526133448161330b565b9050919050565b5f61335582611f03565b915061336083611f03565b9250828203905081811115613378576133776128b1565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea2646970667358221220d23a3ac43aa9f7ceccb5b57562180fb3d3f6b789a75bc90fe3e1cced99c17bc964736f6c63430008190033";

    private static String librariesLinkedBinary;

    public static final String FUNC_AUCTIONS = "auctions";

    public static final String FUNC_BID = "bid";

    public static final String FUNC_CANCELAUCTION = "cancelAuction";

    public static final String FUNC_CHECKANDENDAUCTIONS = "checkAndEndAuctions";

    public static final String FUNC_CREATEAUCTION = "createAuction";

    public static final String FUNC_ENDAUCTION = "endAuction";

    public static final String FUNC_FAILEDREFUNDS = "failedRefunds";

    public static final String FUNC_GETALLAUCTIONSDETAILS = "getAllAuctionsDetails";

    public static final String FUNC_GETAUCTIONANDPETDETAILS = "getAuctionAndPetDetails";

    public static final String FUNC_LISTACTIVEAUCTIONS = "listActiveAuctions";

    public static final String FUNC_LISTACTIVEAUCTIONSINFO = "listActiveAuctionsInfo";

    public static final String FUNC_PETNFT = "petNFT";

    public static final String FUNC_UPDATEAUCTION = "updateAuction";

    public static final String FUNC_WITHDRAWFAILEDREFUND = "withdrawFailedRefund";

    public static final Event AUCTIONAUTOENDED_EVENT = new Event("AuctionAutoEnded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUCTIONCANCELLED_EVENT = new Event("AuctionCancelled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}));
    ;

    public static final Event AUCTIONCREATED_EVENT = new Event("AuctionCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUCTIONENDED_EVENT = new Event("AuctionEnded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUCTIONUPDATED_EVENT = new Event("AuctionUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BIDPLACED_EVENT = new Event("BidPlaced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    public PetAuction_abi(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public PetAuction_abi(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PetAuction_abi(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PetAuction_abi(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }


//    public static List<AuctionAutoEndedEventResponse> getAuctionAutoEndedEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONAUTOENDED_EVENT, transactionReceipt);
//        ArrayList<AuctionAutoEndedEventResponse> responses = new ArrayList<AuctionAutoEndedEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            AuctionAutoEndedEventResponse typedResponse = new AuctionAutoEndedEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
//            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static AuctionAutoEndedEventResponse getAuctionAutoEndedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUCTIONAUTOENDED_EVENT, log);
        AuctionAutoEndedEventResponse typedResponse = new AuctionAutoEndedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AuctionAutoEndedEventResponse> auctionAutoEndedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuctionAutoEndedEventFromLog(log));
    }

    public Flowable<AuctionAutoEndedEventResponse> auctionAutoEndedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONAUTOENDED_EVENT));
        return auctionAutoEndedEventFlowable(filter);
    }

//    public static List<AuctionCancelledEventResponse> getAuctionCancelledEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONCANCELLED_EVENT, transactionReceipt);
//        ArrayList<AuctionCancelledEventResponse> responses = new ArrayList<AuctionCancelledEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            AuctionCancelledEventResponse typedResponse = new AuctionCancelledEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static AuctionCancelledEventResponse getAuctionCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUCTIONCANCELLED_EVENT, log);
        AuctionCancelledEventResponse typedResponse = new AuctionCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AuctionCancelledEventResponse> auctionCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuctionCancelledEventFromLog(log));
    }

    public Flowable<AuctionCancelledEventResponse> auctionCancelledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONCANCELLED_EVENT));
        return auctionCancelledEventFlowable(filter);
    }

//    public static List<AuctionCreatedEventResponse> getAuctionCreatedEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONCREATED_EVENT, transactionReceipt);
//        ArrayList<AuctionCreatedEventResponse> responses = new ArrayList<AuctionCreatedEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            AuctionCreatedEventResponse typedResponse = new AuctionCreatedEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.reservePrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
//            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
//            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static AuctionCreatedEventResponse getAuctionCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUCTIONCREATED_EVENT, log);
        AuctionCreatedEventResponse typedResponse = new AuctionCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.reservePrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<AuctionCreatedEventResponse> auctionCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuctionCreatedEventFromLog(log));
    }

    public Flowable<AuctionCreatedEventResponse> auctionCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONCREATED_EVENT));
        return auctionCreatedEventFlowable(filter);
    }

//    public static List<AuctionEndedEventResponse> getAuctionEndedEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONENDED_EVENT, transactionReceipt);
//        ArrayList<AuctionEndedEventResponse> responses = new ArrayList<AuctionEndedEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            AuctionEndedEventResponse typedResponse = new AuctionEndedEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
//            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static AuctionEndedEventResponse getAuctionEndedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUCTIONENDED_EVENT, log);
        AuctionEndedEventResponse typedResponse = new AuctionEndedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.CreatedStartTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.CreatedEndTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<AuctionEndedEventResponse> auctionEndedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuctionEndedEventFromLog(log));
    }

    public Flowable<AuctionEndedEventResponse> auctionEndedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONENDED_EVENT));
        return auctionEndedEventFlowable(filter);
    }

//    public static List<AuctionUpdatedEventResponse> getAuctionUpdatedEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONUPDATED_EVENT, transactionReceipt);
//        ArrayList<AuctionUpdatedEventResponse> responses = new ArrayList<AuctionUpdatedEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            AuctionUpdatedEventResponse typedResponse = new AuctionUpdatedEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.newReservePrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
//            typedResponse.newEndTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static AuctionUpdatedEventResponse getAuctionUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUCTIONUPDATED_EVENT, log);
        AuctionUpdatedEventResponse typedResponse = new AuctionUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newReservePrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newEndTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AuctionUpdatedEventResponse> auctionUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuctionUpdatedEventFromLog(log));
    }

    public Flowable<AuctionUpdatedEventResponse> auctionUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONUPDATED_EVENT));
        return auctionUpdatedEventFlowable(filter);
    }

//    public static List<BidPlacedEventResponse> getBidPlacedEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BIDPLACED_EVENT, transactionReceipt);
//        ArrayList<BidPlacedEventResponse> responses = new ArrayList<BidPlacedEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            BidPlacedEventResponse typedResponse = new BidPlacedEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(0).getValue();
//            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }

    public static BidPlacedEventResponse getBidPlacedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BIDPLACED_EVENT, log);
        BidPlacedEventResponse typedResponse = new BidPlacedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BidPlacedEventResponse> bidPlacedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBidPlacedEventFromLog(log));
    }

    public Flowable<BidPlacedEventResponse> bidPlacedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BIDPLACED_EVENT));
        return bidPlacedEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean>> auctions(BigInteger param0) {
        final Function function = new Function(FUNC_AUCTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean>>(function,
                new Callable<Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> bid(BigInteger tokenId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelAuction(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_CANCELAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkAndEndAuctions() {
        final Function function = new Function(
                FUNC_CHECKANDENDAUCTIONS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAuction(BigInteger tokenId, BigInteger reservePrice, BigInteger auctionDuration) {
        final Function function = new Function(
                FUNC_CREATEAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(reservePrice), 
                new org.web3j.abi.datatypes.generated.Uint256(auctionDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endAuction(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_ENDAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> failedRefunds(String param0) {
        final Function function = new Function(FUNC_FAILEDREFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllAuctionsDetails() {
        final Function function = new Function(FUNC_GETALLAUCTIONSDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Auction>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Auction, PetAttributes>> getAuctionAndPetDetails(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAUCTIONANDPETDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Auction>() {}, new TypeReference<PetAttributes>() {}));
        return new RemoteFunctionCall<Tuple2<Auction, PetAttributes>>(function,
                new Callable<Tuple2<Auction, PetAttributes>>() {
                    @Override
                    public Tuple2<Auction, PetAttributes> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Auction, PetAttributes>(
                                (Auction) results.get(0), 
                                (PetAttributes) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<List> listActiveAuctions() {
        final Function function = new Function(FUNC_LISTACTIVEAUCTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<List<BigInteger>, List<Auction>, List<PetAttributes>>> listActiveAuctionsInfo() {
        final Function function = new Function(FUNC_LISTACTIVEAUCTIONSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Auction>>() {}, new TypeReference<DynamicArray<PetAttributes>>() {}));
        return new RemoteFunctionCall<Tuple3<List<BigInteger>, List<Auction>, List<PetAttributes>>>(function,
                new Callable<Tuple3<List<BigInteger>, List<Auction>, List<PetAttributes>>>() {
                    @Override
                    public Tuple3<List<BigInteger>, List<Auction>, List<PetAttributes>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<BigInteger>, List<Auction>, List<PetAttributes>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Auction>) results.get(1).getValue()), 
                                convertToNative((List<PetAttributes>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> petNFT() {
        final Function function = new Function(FUNC_PETNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAuction(BigInteger tokenId, BigInteger newReservePrice, BigInteger newAuctionDuration) {
        final Function function = new Function(
                FUNC_UPDATEAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(newReservePrice), 
                new org.web3j.abi.datatypes.generated.Uint256(newAuctionDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawFailedRefund() {
        final Function function = new Function(
                FUNC_WITHDRAWFAILEDREFUND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PetAuction_abi load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetAuction_abi(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PetAuction_abi load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetAuction_abi(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PetAuction_abi load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PetAuction_abi(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PetAuction_abi load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PetAuction_abi(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PetAuction_abi> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _petNFTAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _petNFTAddress)));
        return deployRemoteCall(PetAuction_abi.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<PetAuction_abi> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _petNFTAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _petNFTAddress)));
        return deployRemoteCall(PetAuction_abi.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PetAuction_abi> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _petNFTAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _petNFTAddress)));
        return deployRemoteCall(PetAuction_abi.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PetAuction_abi> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _petNFTAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _petNFTAddress)));
        return deployRemoteCall(PetAuction_abi.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

//    public static void linkLibraries(List<Contract.LinkReference> references) {
//        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
//    }

    public static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    @Builder
    @NoArgsConstructor
    @Data
    public static class Auction extends StaticStruct {
        public String seller;

        public BigInteger tokenId;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger highestBid;

        public String highestBidder;

        public BigInteger reservePrice;

        public Boolean active;

        public Auction(String seller, BigInteger tokenId, BigInteger startTime, BigInteger endTime, BigInteger highestBid, String highestBidder, BigInteger reservePrice, Boolean active) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                    new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(endTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(highestBid), 
                    new org.web3j.abi.datatypes.Address(160, highestBidder), 
                    new org.web3j.abi.datatypes.generated.Uint256(reservePrice), 
                    new org.web3j.abi.datatypes.Bool(active));
            this.seller = seller;
            this.tokenId = tokenId;
            this.startTime = startTime;
            this.endTime = endTime;
            this.highestBid = highestBid;
            this.highestBidder = highestBidder;
            this.reservePrice = reservePrice;
            this.active = active;
        }

        public Auction(Address seller, Uint256 tokenId, Uint256 startTime, Uint256 endTime, Uint256 highestBid, Address highestBidder, Uint256 reservePrice, Bool active) {
            super(seller, tokenId, startTime, endTime, highestBid, highestBidder, reservePrice, active);
            this.seller = seller.getValue();
            this.tokenId = tokenId.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
            this.highestBid = highestBid.getValue();
            this.highestBidder = highestBidder.getValue();
            this.reservePrice = reservePrice.getValue();
            this.active = active.getValue();
        }
    }

    public static class PetAttributes extends DynamicStruct {
        public BigInteger level;

        public String name;

        public String appearance;

        public String character;

        public String description;

        public String uri;

        public PetAttributes(BigInteger level, String name, String appearance, String character, String description, String uri) {
            super(new org.web3j.abi.datatypes.generated.Uint256(level), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.Utf8String(appearance), 
                    new org.web3j.abi.datatypes.Utf8String(character), 
                    new org.web3j.abi.datatypes.Utf8String(description), 
                    new org.web3j.abi.datatypes.Utf8String(uri));
            this.level = level;
            this.name = name;
            this.appearance = appearance;
            this.character = character;
            this.description = description;
            this.uri = uri;
        }

        public PetAttributes(Uint256 level, Utf8String name, Utf8String appearance, Utf8String character, Utf8String description, Utf8String uri) {
            super(level, name, appearance, character, description, uri);
            this.level = level.getValue();
            this.name = name.getValue();
            this.appearance = appearance.getValue();
            this.character = character.getValue();
            this.description = description.getValue();
            this.uri = uri.getValue();
        }
    }

    public static class AuctionAutoEndedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String winner;

        public BigInteger amount;
    }

    public static class AuctionCancelledEventResponse extends BaseEventResponse {
        public BigInteger tokenId;
    }

    public static class AuctionCreatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String seller;

        public BigInteger reservePrice;

        public BigInteger startTime;

        public BigInteger endTime;
    }

    public static class AuctionEndedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String winner;

        public BigInteger amount;

        public BigInteger endTime;

        public BigInteger CreatedStartTime;

        public BigInteger CreatedEndTime;
    }

    public static class AuctionUpdatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public BigInteger newReservePrice;

        public BigInteger newEndTime;
    }

    public static class BidPlacedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String bidder;

        public BigInteger amount;
    }
}
